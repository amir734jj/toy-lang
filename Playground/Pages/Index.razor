@page "/"
@using Playground.Data
@using Models
@using System.IO
@inject OnDemandCompilerService _onDemandCompilerService
@inject IJSRuntime _jsRuntime

<h2>Toy-lang Playground</h2>

<div class="container-fluid" style="margin-bottom: 2rem">
    Run <pre class="inline">compile</pre> to see the resuling JavaScript code then open console to see the result after clicking on <pre class="inline">run</pre>
    <br >
    Source Code: <a href="https://github.com/amir734jj/toy-lang">https://github.com/amir734jj/toy-lang</a>
</div>

<div class="container-fluid">
    <div class="row">
        <div class="col-sm-6">
            <textarea @bind="_code" style="width: 100%; height: 30rem"></textarea>
        </div>
        <div class="col-sm-6">
            @if (_errors.Any())
            {
                <textarea readonly="readonly" style="width: 100%; height: 30rem">@(string.Join(Environment.NewLine, _errors))</textarea>
            }
            else
            {
                <textarea readonly="readonly" style="width: 100%; height: 30rem">@_javascript</textarea>
            }
        </div>
        <div class="col-sm-6">
            <button @onclick="Compile">Compile</button>
            @if (!string.IsNullOrWhiteSpace(_javascript))
            {
                <button @onclick="Run">Run</button>
            }
        </div>
    </div>
</div>

@code
{
    private string _code = File.ReadAllText("fibonacci.toy");

    private string _javascript;

    private List<string> _errors = new();

    async Task Run()
    {
        var result = await _jsRuntime.InvokeAsync<object>("JSMethod", _javascript);
        Console.WriteLine(result);
    }

    void Compile()
    {
        var payload = new CompilerPayload
        {
            Code = _code
        };

        _onDemandCompilerService.Compile(payload);

        _errors = payload.Errors;
        _javascript = payload.Result;
    }
}
